-- Retrieve the list of products ordered in June 2023
SELECT DISTINCT p.product_id, p.product_name
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
WHERE o.order_date BETWEEN '2023-06-01' AND '2023-06-30';

-- Calculate the total revenue generated by each product category
SELECT c.category_id, c.category_name, SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_id, c.category_name
ORDER BY total_revenue DESC;

-- Identify the top 5 customers who spent the most during the last quarter
SELECT c.customer_id, c.customer_name, SUM(oi.quantity * oi.unit_price) AS total_spent
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.order_date BETWEEN '2023-10-01' AND '2023-12-31'
GROUP BY c.customer_id, c.customer_name
ORDER BY total_spent DESC
LIMIT 5;

-- Find the average order value for each month of 2022
SELECT DATE_FORMAT(o.order_date, '%Y-%m') AS month, AVG(o.total_amount) AS avg_order_value
FROM orders o
WHERE YEAR(o.order_date) = 2022
GROUP BY month
ORDER BY month;

-- List all orders shipped to California with a total value greater than $100
SELECT o.order_id, o.customer_id, o.total_amount, o.shipping_state
FROM orders o
WHERE o.shipping_state = 'California' AND o.total_amount > 100;

-- Determine the average rating for each product
SELECT p.product_id, p.product_name, AVG(r.rating) AS avg_rating
FROM reviews r
JOIN products p ON r.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY avg_rating DESC;

-- Show the daily trend of order volume for the past month
SELECT o.order_date, COUNT(o.order_id) AS order_count
FROM orders o
WHERE o.order_date >= CURDATE() - INTERVAL 1 MONTH
GROUP BY o.order_date
ORDER BY o.order_date;

-- Create a report that shows the monthly revenue growth rate
WITH monthly_revenue AS (
    SELECT DATE_FORMAT(order_date, '%Y-%m') AS month, SUM(total_amount) AS revenue
    FROM orders
    GROUP BY month
)
SELECT m1.month, m1.revenue, ((m1.revenue - m2.revenue) / m2.revenue) * 100 AS growth_rate
FROM monthly_revenue m1
LEFT JOIN monthly_revenue m2 
ON DATE_FORMAT(DATE_SUB(STR_TO_DATE(m1.month, '%Y-%m'), INTERVAL 1 MONTH), '%Y-%m') = m2.month
ORDER BY m1.month;

-- Identify products that have never been ordered
SELECT p.product_id, p.product_name
FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id
WHERE oi.product_id IS NULL;

-- Find customers who have placed orders in both 2022 and 2023
SELECT c.customer_id, c.customer_name
FROM customers c
JOIN orders o1 ON c.customer_id = o1.customer_id AND YEAR(o1.order_date) = 2022
JOIN orders o2 ON c.customer_id = o2.customer_id AND YEAR(o2.order_date) = 2023
GROUP BY c.customer_id, c.customer_name;
